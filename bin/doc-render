#!/usr/bin/env python
#
# (C) Mathias Brossard <mathias@brossard.org>

import subprocess
import argparse
import shutil
import os
import re

resources = os.path.dirname(os.path.realpath(__file__))
resources = os.path.realpath(resources + "/../resources")

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='Subcommands')

parser_pdf = subparsers.add_parser('pdf', help='Render PDF file')
parser_pdf.set_defaults(cmd="pdf")
m = parser_pdf.add_argument_group('Arguments')
m.add_argument('--embed', '-e', help='embed fonts', action='count')
m.add_argument('--fop', '-f', help='path to fop binary', required=False)
m.add_argument('--stylesheet', '-s', help='stylesheet', required=False)
m.add_argument('file', nargs='*', help='input file(s)')

parser_epub = subparsers.add_parser('epub', help='Render EPUB file')
parser_epub.set_defaults(cmd="epub")
m = parser_epub.add_argument_group('Arguments')
m.add_argument('--epub3', '-3', help='use EPUB3', action='count')
m.add_argument('--stylesheet', '-s', help='stylesheet', required=False)
m.add_argument('file', nargs='*', help='input file(s)')

parser_html = subparsers.add_parser('html', help='Render HTML file')
parser_html.set_defaults(cmd="html")
m = parser_html.add_argument_group('Arguments')
m.add_argument('--single', help='output single page', action='count')
m.add_argument('--stylesheet', '-s', help='stylesheet', required=False)
m.add_argument('file', nargs='*', help='input file(s)')

parser_webhelp = subparsers.add_parser('webhelp', help='Render to webhelp')
parser_webhelp.set_defaults(cmd="webhelp")
m = parser_webhelp.add_argument_group('Arguments')
m.add_argument('--stylesheet', '-s', help='stylesheet', required=False)
m.add_argument('file', nargs='*', help='input file(s)')

args = parser.parse_args()
cwd = os.getcwd()

if(args.cmd == "pdf"):
    style = args.stylesheet if args.stylesheet else "pdf-us.xsl"

    fop = subprocess.check_output([ 'which', 'fop' ]).rstrip()
    fop_opts = "-Djava.awt.headless=true"
    os.environ['FOP_OPTS'] = fop_opts
    c = "fop14.xconf.in" if args.embed else "fop.xconf.in"
    with open(resources + "/" + c, "r") as f:
        t = f.read()
    t = t.replace('%FONT_PATH%', resources + "/fonts")
    
    if os.path.isfile(style):
        xsl = style
    elif(os.path.isfile(resources + "/" + style)):
        xsl = resources + "/" + style       
    elif(os.path.isfile(resources + "/" + style + ".xsl")):
        xsl = resources + "/" + style + ".xsl"

    if not (os.path.isfile(xsl)):
        print "Unknown stylesheet: '%s'\n" % style
        exti(-1)
        
    for xml in args.file:
        os.chdir(cwd)
        xml = os.path.realpath(xml)
        os.chdir(os.path.dirname(xml))
        xml = os.path.basename(xml)
        base = xml.replace('.xml', '')
        fo = "%s.fo" % base
        pdf = "%s.pdf" % base
        cnf = "%s.cnf" % base
        with open(cnf, "w") as f:
            f.write(t)
        subprocess.call([ "xsltproc", "-o", fo, "--xinclude", "--nonet",
                          "--stringparam", "resources.path", resources,
                          xsl, xml ])
        subprocess.call([ fop, "-c", cnf, "-fo", fo, "-pdf", pdf ])
        os.unlink(cnf)
        os.unlink(fo)

if(args.cmd == "epub"):
    style = args.stylesheet if args.stylesheet else ("epub3.xsl" if args.epub3 else "epub.xsl")
    xsl = resources + '/' + style
    for xml in args.file:
        os.chdir(cwd)
        xml = os.path.realpath(xml)
        os.chdir(os.path.dirname(xml))
        xml = os.path.basename(xml)
        base = xml.replace('.xml', '')
        epub = "%s.epub" % base
        subprocess.call([ "rm", "-rf", "META-INF", "OEBPS", epub ])
        cmd = ([ "xsltproc", "--xinclude", "--nonet",
                 "--stringparam", "resources.path", resources ] +
               ([ "--stringparam", "base.dir", "OEBPS" ] if args.epub3 else []) +
               [ xsl, xml ])
        subprocess.call(cmd)

        with open("OEBPS/" + ("package.opf" if args.epub3 else "content.opf"), "r") as f:
            content = f.read()

        m = re.search(r'<item id="[^"]+" href="([^"]+)" media-type="image/[^"]+"/>', content)
        print m.groups()
        for img in m.groups():
            if re.search(r'^[.][.]', img) or re.search(r'^/', img):
                print "Path like %s are not supported"
                continue
            d = "OEBPS/" + os.path.dirname(img)
            os.makedirs(d)
            shutil.copy(img, d)

        if not args.epub3:
            with open("mimetype", "w") as f:
                f.write("application/epub+zip")
        subprocess.call([ "zip", "-0X", epub, "mimetype" ])
        subprocess.call([ "zip", "-r9DX", epub, "OEBPS", "META-INF" ])
        subprocess.call([ "rm", "-rf", "META-INF", "OEBPS", "mimetype" ])

if(args.cmd == "html"):
    style = args.stylesheet if args.stylesheet else ("html-single.xsl" if args.single else "html.xsl")
    xsl = resources + '/' + style
    for xml in args.file:
        os.chdir(cwd)
        xml = os.path.realpath(xml)
        os.chdir(os.path.dirname(xml))
        xml = os.path.basename(xml)
        base = xml.replace('.xml', '')
        if args.single:
            html = "%s.html" % base
        else:
            html = "%s_html" % base
        subprocess.call([ "rm", "-rf", html ])
        cmd = ([ "xsltproc", "--xinclude", "--nonet",
                 "--stringparam", "resources.path", resources ] +
               ([ "--output", html ] if args.single else [ "--stringparam", "base.dir", html ]) +
               [ xsl, xml ])
        subprocess.call(cmd)

os.chdir(cwd)
